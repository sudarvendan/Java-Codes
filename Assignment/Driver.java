package upgrad;

import com.mongodb.DBObject;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import netscape.javascript.JSObject;
import org.bson.Document;
import org.bson.json.JsonObject;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import javax.print.Doc;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.function.DoubleToIntFunction;

public class Driver {

    public static void main(String[] args) throws SQLException {
        // MySql credentials
        String url = "jdbc:mysql://pgc-sd-bigdata.cyaielc9bmnf.us-east-1.rds.amazonaws.com:3306/pgcdata";
        String user = "student";
        String password = "STUDENT123";

        // MongoDB Configurations
        String dbName = "grad_assign";
        String url2 = "mongodb://ec2-3-86-17-81.compute-1.amazonaws.com:27017";
        String collectionName = "products";

        // Connection Default Value Initialization
        Connection sqlConnection = null;
        MongoClient mongoClient = null;

        // MySQL Connection
        sqlConnection = DriverManager.getConnection(url,user,password);

        if(sqlConnection != null){
            System.out.println("Connected to DataBase");
        }

        // Mongo Connection
        mongoClient = MongoClients.create(url2);
        MongoDatabase db = mongoClient.getDatabase(dbName);
        MongoCollection<Document> collection = db.getCollection(collectionName);

        try {
            // Creating database connections
            Statement statement = sqlConnection.createStatement();

            // Import data into MongoDb
            // Import Cameras Data from MySQL to MongoDB
            ResultSet resultSet = statement.executeQuery("select * from cameras");
            List<Document> docCameras = new ArrayList<>();
            while(resultSet.next()){
                int columnCount;
                Document document = new Document();
                columnCount = resultSet.getMetaData().getColumnCount();
                for(int i=1;i<=columnCount;i++){
                    String columnName = resultSet.getMetaData().getColumnName(i);
                    Object value = resultSet.getObject(i);
                    document.append(columnName, value);
                }
                document.append("Category", "Cameras");
                docCameras.add(document);
                collection.insertMany(docCameras);
                docCameras = new ArrayList<>();
            }
            // Import Mobiles Data from MySQL to MongoDB
            ResultSet resultSet1 = statement.executeQuery("select * from mobiles");
            List<Document> docMobiles = new ArrayList<>();
            while(resultSet1.next()){
                int columnCount;
                Document document = new Document();
                columnCount = resultSet.getMetaData().getColumnCount();
                for(int i=1;i<=columnCount;i++){
                    String columnName = resultSet.getMetaData().getColumnName(i);
                    Object value = resultSet.getObject(i);
                    document.append(columnName, value);
                }
                document.append("Category", "Mobiles");
                docMobiles.add(document);
                collection.insertMany(docMobiles);
                docMobiles = new ArrayList<>();
            }
            // Import Headphones Data from MySQL to MongoDB
            ResultSet resultSet2 = statement.executeQuery("select * from headphones");
            List<Document> docHeadphones = new ArrayList<>();
            while(resultSet2.next()){
                int columnCount;
                Document document = new Document();
                columnCount = resultSet.getMetaData().getColumnCount();
                for(int i=1;i<=columnCount;i++){
                    String columnName = resultSet.getMetaData().getColumnName(i);
                    Object value = resultSet.getObject(i);
                    document.append(columnName, value);
                }
                document.append("Category", "Headphones");
                docHeadphones.add(document);
                collection.insertMany(docHeadphones);
                docHeadphones = new ArrayList<>();
            }

            // List all products in the inventory
//            CRUDHelper.displayAllProducts(collection);

            // Display top 5 Mobiles
//            CRUDHelper.displayTop5Mobiles(collection);


            // Display products ordered by their categories in Descending Order Without autogenerated Id
//            CRUDHelper.displayCategoryOrderedProductsDescending(collection);

            // Display product count in each category
//            CRUDHelper.displayProductCountByCategory(collection);

            // Display wired headphones
//            CRUDHelper.displayWiredHeadphones(collection);
        }
        catch(Exception ex) {
            System.out.println("Got Exception.");
            ex.printStackTrace();
        }
        finally {
            // Close Connections
            sqlConnection.close();
            mongoClient.close();
        }
    }
}
